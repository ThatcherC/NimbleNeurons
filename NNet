#!/usr/bin/python

from random import *

numneurons = 6
numins = 4						#max number of inputs for any neuron
weights = list(range(numins*numneurons))				#elements = numneurons*numins
theta = 0.9
alpha = 0.99
a = 0
y = 0
target = 0
dataset = []

setOne = [1,0.1,1,0.1]
setTwo = [0.1,1,0.1,1]
setThree = [1,1,0.1,0.1]
setFour = [0.1,0.1,1,1]

outOne = [0.1,0.1]
outTwo = [0.1,1]
outThree = [1,0.1]
outFour = [1,1]

def setup():
	global alpha,theta,w1,w2, toasts, weights,y,target
	print "Starting"
	theta = 0.9
	alpha = 0.9
	a = 0
	y = 0
	target = 0

def train(l, tget, neuron):					#trains one neuron (l is training set + target
	global a,weights,y,target
	a = 0							#important - reinitialize
	target = tget
	for i in range(len(l)):
		a = a+(l[i]*weights[i+(numins*neuron)])-theta	#adds weights times inputs
	y = sigma(a)						#squashes
	for i in range(len(l)):
		weights[i+(numins*neuron)] += modifyWeight(l[i])

def evaluateNeuron(e, neuron):
	global a,weights,y
	a=0;							#important - reinitialize
	for i in range(len(e)):
		a = a+(e[i]*weights[i+(numins*neuron)])		#adds weights times inputs
	y = sigma(a)						#squashes
	return y

#def evaluateNet(inn, outt):
	

def modifyWeight(inn):
	return alpha*(target-y)*inn
	

def sigma(x):
	return 1/(1+(2.71828**(0-x)))	

setup()
for p in range(numneurons*numins):
	weights[p] = random()
for m in range(1000):
	train(setOne,1, 0)					#Intermediary neuron 1
	train(setTwo,0.1, 0)
	train(setThree,1,0)
	train(setFour,0.1, 0)

	train(setOne,1, 1)					#Intermediary neuron 2
	train(setTwo,0.1, 1)
	train(setThree,0.1,1)
	train(setFour,1, 1)

	train(outOne,0.1,2)					#Target '1' output neuron
	train(outTwo,0.1,2)
	train(outThree,0.1,2)
	train(outFour,1,2)

	train(outOne,1,3)					#Target '2' output neuron
	train(outTwo,0.1,3)
	train(outThree,0.1,3)
	train(outFour,0.1,3)

	train(outOne,0.1,4)					#Target'3' output neuron
	train(outTwo,0.1,4)
	train(outThree,1,4)
	train(outFour,0.1,4)

	train(outOne,0.1,5)					#Target '4' output neuron
	train(outTwo,1,5)
	train(outThree,0.1,5)
	train(outFour,0.1,5)

print evaluateNeuron(outOne, 2)
print evaluateNeuron(outTwo, 2)
print evaluateNeuron(outThree, 2)
print evaluateNeuron(outFour, 2)
print "		"
print evaluateNeuron(outOne, 3)
print evaluateNeuron(outTwo, 3)
print evaluateNeuron(outThree, 3)
print evaluateNeuron(outFour, 3)
print "		"
print evaluateNeuron(outOne, 4)
print evaluateNeuron(outTwo, 4)
print evaluateNeuron(outThree, 4)
print evaluateNeuron(outFour, 4)
print "		"
print evaluateNeuron(outOne, 5)
print evaluateNeuron(outTwo, 5)
print evaluateNeuron(outThree, 5)
print evaluateNeuron(outFour, 5)